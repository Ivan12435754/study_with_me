# Тип № 1.

# region Основные команды, используемые в данном типе в решении через строки:

'''
for n in range(1, 1000):  # перебор чисел от 1 до 1000
s = bin(n)[2:]   # перевод в двоичную систему счисления
s.count('1')     # сумма цифр числа или количество единиц в строке
s = s + '11'     # в конец записи дописываются '11'
s = s + str(s.count('1') % 2) # в конец записи дописывается остаток от деления суммы на 2
s = '1' + s + '00'  # в начало записи дописывается '1', а в конец записи '00'
r = int(s, 2)    # перевод в десятичную систему счисления
if r > 43:       # если число превышает 43

s = s.replace('1', '*')
s = s.replace('0', '1')   # все цифры заменяются на противоположные (0 на 1, 1 на 0)
s = s.replace('*', '0')

if (r - n) == 133:  # если разность нового и исходного числа равна 133
s = bin(n)[3:]      # перевод в двоичную систему счисления с удалением первой единицы и последующих за ней нулей
s = s[::-1]         # запись «переворачивается», то есть читается справа налево
if s.count('1') > s.count('0')  # если количество единиц в строке больше количества нулей
break               # завершает цикл, чтобы вывести первое число, т.е. наименьшее
'''
# endregion

# region Пример № 1.

# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.

# 1)Строится двоичная запись числа N.
# 2)К этой записи дописываются справа ещё два разряда по следующему правилу:
# а)складываются все цифры двоичной записи, и остаток от деления суммы на 2 дописывается в конец числа (справа).
# Например, запись 11100 преобразуется в запись 111001;
# б)над этой записью производятся те же действия — справа дописывается остаток от деления суммы цифр на 2.

# Укажите минимальное число R, которое превышает 43 и может являться результатом работы алгоритма. В ответе это число запишите в десятичной системе.

# Решение:
'''
for n in range(1, 1000):
    s = bin(n)[2:]

    for i in range(2):
        s = s + str(s.count('1') % 2)

    r = int(s, 2)
    if r > 43:
        print(r)
        break
'''
# endregion


# region Основные команды, используемые в данном типе в решении через списки:
'''
M = []
while x > 0:
    M.append(x % 2)
    x //= 2              # перевод числа в двоичную систему счисления и передаём это число в список M
M.reverse()

M.reverse()    # переворачиваем список, т.е. читаем справа налево

M.append(1)    # в конец записи дописывается 1

M.append(0)
M.reverse()   # в конец записи дописывается 0, а в начало дописывается 1
M.append(1)

r = 0
M.reverse()
for i in range(0, len(M)):     # переводим число в десятичную запись числа и передаём это значение переменной r
    r += M[i] * 2 ** i
    
del M[0]   # удаляем первую единицу и последующие за ней нули

'''


# endregion

# region Пример № 2.

# Автомат обрабатывает натуральное число N по следующему алгоритму:

# 1. Строится двоичная запись числа N.
# 2. Складываются все цифры полученной двоичной записи. В конец записи (справа) дописывается остаток от деления суммы на 2.
# 3. Предыдущий пункт повторяется для записи с добавленной цифрой.
# 4. Результат переводится в десятичную систему и выводится на экран.

# Какое наименьшее число, большее 93, может появиться на экране в результате работы автомата?

# Решение:
'''
for n in range(1, 1000):
    x = n
    M = []

    while x > 0:
        M.append(x % 2)
        x //= 2
    M.reverse()

    for _ in range(2):
        M.append(M.count(1) % 2)

    r = 0
    M.reverse()
    for i in range(0, len(M)):
        r += M[i] * 2 ** i

    if r > 93:
        print(r)
        break
'''
# endregion


# Тип № 2.

# region Основные команды, используемые в данном типе:

'''
for n in range(1000, 10000): # перебор четырехзначных чисел
s = str(n) # перевод числа в строку
a = int(s[0]) + int(s[1])   # сумма первой цифры и второй цифры
b = int(s[1]) + int(s[2])   # сумма второй цифры и третьей цифры
r = str(max(a, b)) + str(min(a, b))  # два числа записываются в порядке убывания
r = str(min(a, b)) + str(max(a, b))  # два числа записываются в порядке возрастания
sred = a + b + c - min(a, b, c) - max(a, b, c) # средняя из полученных сумм 
'''
# endregion

# region Пример № 3.

# Автомат получает на вход четырёхзначное число (число не может начинаться с нуля). По этому числу строится новое число по следующим правилам.

# 1. Складываются отдельно первая и вторая, вторая и третья, третья и четвёртая цифры заданного числа.
# 2. Наименьшая из полученных трёх сумм удаляется.
# 3. Оставшиеся две суммы записываются друг за другом в порядке неубывания без разделителей.

# Укажите наибольшее число, при обработке которого автомат выдаёт результат 1315.

# Решение:
'''
for n in range(1000, 10000):
    s = str(n)
    a = int(s[0]) + int(s[1])
    b = int(s[1]) + int(s[2])
    c = int(s[2]) + int(s[3])

    sred = a + b + c - min(a, b, c) - max(a, b, c)

    r = str(sred) + str(max(a, b, c))
    if r == '1315':
        print(n)
'''
# endregion
