# region Функции, используемые в данном задании:
'''
def D(x):       # Функция, которая ищет делители числа
    divisors = set()
    for j in range(2, int(x ** 0.5) + 1):
        if x % j == 0:
            divisors.add(j)
            divisors.add(x // j)
            if len(divisors) > 2:
                return divisors
    return sorted(divisors)

def prost(x):    # Функция, которая проверяет является ли число простым
    for i in range(2, x):
        if x % i == 0:
            return False
    return True
'''
# endregion

# region Пример № 1.

# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [174457;174505],
# числа, имеющие ровно два различных натуральных делителя, не считая единицы и самого числа.
# Для каждого найденного числа запишите эти два делителя в два соседних столбца на экране с новой строки в порядке возрастания произведения этих двух делителей.
# Делители в строке также должны следовать в порядке возрастания.

# Решение:
'''
def D(x):
    divisors = set()
    for j in range(2, int(x ** 0.5) + 1):
        if x % j == 0:
            divisors.add(j)                 # Функция, которая ищет делители числа
            divisors.add(x // j)
            if len(divisors) > 2:
                return divisors
    return sorted(divisors)

for i in range(174457, 174505 + 1):
    if len(D(i)) == 2:
        print(D(i))
'''
# endregion

# region Пример № 2.

# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [95632;95650],
# числа, имеющие ровно шесть различных нечётных натуральных делителей (при этом количество четных делителей может быть любым).
# Для каждого найденного числа запишите эти шесть делителей в шесть соседних столбцов на экране с новой строки.
# Делители в строке должны следовать в порядке возрастания.

# Решение:
'''
def D(x):
    divisors = set()
    for j in range(1, int(x ** 0.5) + 1):
        if x % j == 0:
            if j % 2 != 0:
                divisors.add(j)         # Функция, которая ищет нечетные делители числа
            if x // j != j and x // j % 2 != 0:         
                divisors.add(x // j)
    if len(divisors) > 6:
        return divisors
    return sorted(divisors)

for i in range(95632, 95650 + 1):
    if len(D(i)) == 6:
        print(D(i))
'''
# endregion

# region Пример № 3.

# Напишите программу, которая ищет среди целых чисел, принадлежащих числовому отрезку [2422000; 2422080], простые числа.
# Выведите все найденные простые числа в порядке возрастания, слева от каждого числа выведите его номер по порядку, считая,
# что первое найденное число имеет номер «1», второе — «2», и т.д.

# Решение:
'''
def prost(x):
    for i in range(2, x):
        if x % i == 0:           # функция, которая проверяет является ли число простым
            return False
    return True

count = 0
for j in range(2422000, 2422080 + 1):
    if prost(j):
        count += 1
        print(count, j)
'''
# endregion

# region Пример № 4.

# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:

# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**9, найдите все числа, соответствующие маске 12345?7?8, делящиеся на число 23 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания,
# а во втором столбце — соответствующие им результаты деления этих чисел на 23.

# Решение:
'''
from fnmatch import *  # импортируем библиотеку fnmatch

for x in range(23, 10 ** 9, 23): # начало перебора и шаг ставим число из условия
    if fnmatch(str(x), '12345?7?8'):  # вставляем маску
        print(x, x//23)
'''
# endregion



















